{"version":3,"sources":["components/ButtonControl.tsx","components/Map.tsx","components/Icons.ts","components/DraggableMarker.tsx","components/FormDialog.tsx","context/DataContext.tsx","components/CustomPopUp.tsx","components/MarkersList.tsx","App.tsx","index.tsx"],"names":["ButtonControl","handleOpen","className","Button","variant","onClick","Map","height","center","children","MapContainer","style","width","zoom","scrollWheelZoom","TileLayer","attribution","url","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","iconAnchor","getIcon","type","size","shape","iconOptions","iconSize","html","divIcon","DraggableMarker","position","setPosition","markerType","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","loc","getLatLng","lat","lng","Marker","draggable","ref","Popup","minWidth","initialValue","locName","details","locType","FormDialog","open","handleClose","addData","useState","data","setData","handleChange","e","target","name","value","handleCancel","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","Grid","container","spacing","item","xs","sm","TextField","autoFocus","label","required","fullWidth","onChange","FormControl","InputLabel","Select","MenuItem","margin","multiline","DialogActions","color","id","uuidv1","disabled","DataContext","React","createContext","CustomPopUp","textAlign","fontWeight","fontSize","marginBottom","MarkersList","dataSet","useContext","map","el","App","setOpen","matches","useMediaQuery","noSsr","useEffect","localStorage","getItem","JSON","parse","Provider","newData","newDataSet","setItem","stringify","display","justifyContent","alignItems","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad216c42.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\r\n\r\ntype propsType = {\r\n  handleOpen: React.MouseEventHandler<HTMLButtonElement> | undefined;\r\n};\r\n\r\nfunction ButtonControl({ handleOpen }: propsType) {\r\n  return (\r\n    <div className={\"leaflet-bottom leaflet-left\"}>\r\n      <div className=\"leaflet-control leaflet-bar\">\r\n        <Button variant=\"contained\" onClick={handleOpen}>\r\n          Share Location\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonControl;\r\n","import { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\n\r\ntype propsType = {\r\n  height: string;\r\n  center: LatLngExpression | undefined;\r\n  children?: JSX.Element | never[];\r\n};\r\n\r\nfunction Map({ height, center, children }: propsType) {\r\n  return (\r\n    <MapContainer\r\n      style={{ height: height, width: \"100%\" }}\r\n      center={center}\r\n      zoom={13}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {children}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import L, { DivIconOptions } from 'leaflet';\r\nimport icon from 'leaflet/dist/images/marker-icon.png';\r\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\r\n\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n  iconAnchor: [13, 5],\r\n});\r\nconst getIcon = (type: any, size: number = 30) => {\r\n  if (type > 3 || type <= 1) return DefaultIcon;\r\n  const shape = type === 2 ? '🏠' : '🏦';\r\n\r\n  const iconOptions: DivIconOptions = {\r\n    iconSize: [size, size],\r\n    iconAnchor: [20, size / 10],\r\n    className: 'mymarker',\r\n    html: shape,\r\n  };\r\n  return L.divIcon(iconOptions);\r\n};\r\n\r\nexport { getIcon };\r\n","import { LatLngExpression } from 'leaflet';\r\nimport { useRef, useMemo } from 'react';\r\nimport { Marker, Popup } from 'react-leaflet';\r\nimport { getIcon } from './Icons';\r\n\r\ntype propsType = {\r\n  position: LatLngExpression;\r\n  setPosition: React.Dispatch<React.SetStateAction<number[]>>;\r\n  markerType?: number | unknown; //DivIcon | Icon<IconOptions> | undefined;\r\n};\r\n\r\nfunction DraggableMarker({ position, setPosition, markerType = 1 }: propsType) {\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker: any = markerRef.current;\r\n        if (marker != null) {\r\n          const loc = marker.getLatLng();\r\n          setPosition([loc.lat, loc.lng]);\r\n        }\r\n      },\r\n    }),\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Marker\r\n      draggable\r\n      eventHandlers={eventHandlers}\r\n      position={position}\r\n      ref={markerRef}\r\n      icon={getIcon(markerType)}\r\n    >\r\n      <Popup minWidth={90}>Drag me wherever you want to share :)</Popup>\r\n    </Marker>\r\n  );\r\n}\r\n\r\nexport default DraggableMarker;\r\n","import { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Map from './Map';\r\nimport DraggableMarker from './DraggableMarker';\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { Grid } from '@material-ui/core';\r\n\r\ntype propsType = {\r\n  open: boolean;\r\n  handleClose: any;\r\n  addData: (newData: any) => void;\r\n};\r\nconst initialValue = { locName: '', details: '', locType: 1 };\r\n\r\nfunction FormDialog({ open, handleClose, addData }: propsType) {\r\n  const [data, setData] = useState(initialValue);\r\n  const [position, setPosition] = useState<any>([51.505, -0.09]);\r\n\r\n  const handleChange = (e: any) => {\r\n    setData({ ...data, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const { locName, details, locType } = data;\r\n    addData({ id: uuidv1(), locName, details, locType, position });\r\n    handleCancel();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setData(initialValue);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleCancel}>\r\n      <DialogTitle>Share Location</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          here you can share your location on map with your friends!\r\n        </DialogContentText>\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              autoFocus\r\n              name=\"locName\"\r\n              label=\"Location Name\"\r\n              type=\"text\"\r\n              required\r\n              fullWidth\r\n              value={data.locName}\r\n              onChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControl style={{ width: '100%' }}>\r\n              <InputLabel>Location Type</InputLabel>\r\n              <Select\r\n                name=\"locType\"\r\n                value={data.locType}\r\n                onChange={handleChange}\r\n              >\r\n                <MenuItem value={1}>Default</MenuItem>\r\n                <MenuItem value={2}>{'Home 🏠'}</MenuItem>\r\n                <MenuItem value={3}>{'Office 🏦'}</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <TextField\r\n          margin=\"dense\"\r\n          name=\"details\"\r\n          label=\"Details\"\r\n          type=\"text\"\r\n          fullWidth\r\n          multiline\r\n          value={data.details}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <Map height={'200px'} center={[51.505, -0.09]}>\r\n          <DraggableMarker\r\n            position={position}\r\n            setPosition={setPosition}\r\n            markerType={data.locType || 1}\r\n          />\r\n        </Map>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleCancel} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleSave} color=\"primary\" disabled={!data.locName}>\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default FormDialog;\r\n","import React from 'react';\r\nimport DataInterface from '../interfaces/data.interface';\r\n\r\ninterface AppContextInterface {\r\n  data: DataInterface[];\r\n  setData: React.Dispatch<React.SetStateAction<DataInterface[]>>;\r\n}\r\n\r\nconst DataContext = React.createContext<AppContextInterface | null>(null);\r\n\r\nexport default DataContext;\r\n","import { Popup } from 'react-leaflet';\r\n\r\nexport default function CustomPopUp({\r\n  name,\r\n  details,\r\n}: {\r\n  name: string;\r\n  details: string;\r\n}) {\r\n  return (\r\n    <Popup className=\"request-popup\">\r\n      <div style={{ textAlign: 'start', height: '50px' }}>\r\n        <div style={{ fontWeight: 'bold', fontSize: '22px' }}>\r\n          {`Name: ${name}`}\r\n        </div>\r\n        <span style={{ fontSize: '15px', marginBottom: '20px' }}>\r\n          {`Details: ${details}`}\r\n        </span>\r\n      </div>\r\n    </Popup>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Marker } from 'react-leaflet';\r\nimport DataContext from '../context/DataContext';\r\nimport CustomPopUp from '../components/CustomPopUp';\r\nimport { getIcon } from '../components/Icons';\r\n\r\nfunction MarkersList() {\r\n  const dataSet = useContext(DataContext);\r\n\r\n  if (dataSet === null) return null;\r\n  return (\r\n    <>\r\n      {dataSet.data.map((el) => (\r\n        <Marker position={el.position} icon={getIcon(el.locType)} key={el.id}>\r\n          {/* <Popup>{el.locName}</Popup> */}\r\n          <CustomPopUp name={el.locName} details={el.details} />\r\n        </Marker>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MarkersList;\r\n","import { useEffect, useState } from 'react';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport ButtonControl from './components/ButtonControl';\r\nimport DataInterface from './interfaces/data.interface';\r\nimport Map from './components/Map';\r\nimport FormDialog from './components/FormDialog';\r\nimport DataContext from './context/DataContext';\r\nimport MarkersList from './components/MarkersList';\r\n\r\nfunction App() {\r\n  const [open, setOpen] = useState(false);\r\n  const [data, setData] = useState<DataInterface[]>([]);\r\n  const matches = useMediaQuery('(min-width:992px)', { noSsr: true });\r\n\r\n  useEffect(() => {\r\n    const dataSet = localStorage.getItem('dataSet');\r\n    if (dataSet !== null) setData(JSON.parse(dataSet));\r\n  }, []);\r\n\r\n  const addData = (newData: DataInterface) => {\r\n    const newDataSet = [...data, newData];\r\n    setData(newDataSet);\r\n    localStorage.setItem('dataSet', JSON.stringify(newDataSet));\r\n  };\r\n\r\n  if (!matches)\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: '100vh',\r\n        }}\r\n      >\r\n        <h1 style={{ textAlign: 'center' }}>\r\n          This App is not working with this size of screen!\r\n        </h1>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <DataContext.Provider value={{ data, setData }}>\r\n      <Map height={'100vh'} center={[51.505, -0.09]}>\r\n        <>\r\n          <MarkersList />\r\n          <ButtonControl handleOpen={() => setOpen(true)} />\r\n        </>\r\n      </Map>\r\n      <FormDialog\r\n        open={open}\r\n        handleClose={() => setOpen(false)}\r\n        addData={addData}\r\n      />\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}